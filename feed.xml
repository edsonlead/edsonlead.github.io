<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://edsonlead.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://edsonlead.com/" rel="alternate" type="text/html" /><updated>2017-12-16T14:04:24-03:00</updated><id>http://edsonlead.com/</id><title type="html">Edson Araújo</title><subtitle>Blog pessoal sobre alguns hobbies envolvendo programação.</subtitle><author><name>Edson Araújo</name></author><entry><title type="html">Lista de Animes do Site Saiko</title><link href="http://edsonlead.com/lista-de-animes-do-site-saiko/" rel="alternate" type="text/html" title="Lista de Animes do Site Saiko" /><published>2017-12-10T00:00:00-03:00</published><updated>2017-12-10T00:00:00-03:00</updated><id>http://edsonlead.com/lista-de-animes-do-site-saiko</id><content type="html" xml:base="http://edsonlead.com/lista-de-animes-do-site-saiko/">&lt;p&gt;Para treinar raspagem de dados foi utilizado como objeto de estudos um site que conheci recentemente. Ele tem um layout bem legal, o webdesigner deixou as marcações html em uma forma aceitável para o nosso estudo, ótimo para download de animes e seus colaboradores dispobilizam o calendário de lançamento dos episódios. Porém, não possui a tradicional lista de animes sem os pôsters e é recheado de propaganda com redirecionamento de páginas (isso me deixa louco kkk), o que é bom para começarmos a brincar. =D&lt;/p&gt;

&lt;h2 id=&quot;objetivos&quot;&gt;Objetivos&lt;/h2&gt;

&lt;p&gt;Esse foi um projeto bem simples que possuiu três objetivos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Auxiliar na aprendizagem da técnica de raspagem de dados utilizando Python;&lt;/li&gt;
  &lt;li&gt;Criar um formato de lista que o site Saiko não possui;&lt;/li&gt;
  &lt;li&gt;Facilitar o download dos episódios.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;o-alvo&quot;&gt;O Alvo&lt;/h2&gt;

&lt;p&gt;O site de animes Saiko. URL: https://saikoanimes.com&lt;/p&gt;

&lt;h2 id=&quot;o-desafio&quot;&gt;O Desafio&lt;/h2&gt;

&lt;p&gt;Como o site Saiko possui apenas listas de animes com figuras e muito redirecionamento de páginas, &lt;em&gt;o que demanda um pouco a mais de tempo e dados de conexão para o processamento das páginas (fora um pouco de dor de cabeça)&lt;/em&gt;, o desafio foi de recuperar dados desses animes e criar uma lista com apenas pôster de anime, o nome, link para acesso no site Saiko, nota e episódios dos animes.&lt;/p&gt;

&lt;p&gt;Basicamente, o desafio foi o de facilitar o download dos episódios de animes desse site. Apenas os animes legendados foram escolhidos devido a sua maior quantidade.&lt;/p&gt;

&lt;h2 id=&quot;o-algoritmo&quot;&gt;O Algoritmo&lt;/h2&gt;

&lt;p&gt;O algoritmo inicia com a captura da url que possui 9 páginas, sendo que todas elas possuem um total de 42 animes (com exceção da última página que possui 41 animes). A url padrão das páginas dos animes legendados é: https://saikoanimes.com/legendados/?fwp_paged=. Para cada página, cada anime é capturado de acordo com a tag “&amp;lt;div class=”anime”&amp;gt;”. E para cada anime é capturado dados referentes ao pôster (&amp;lt;img), ao nome (&amp;lt;div class=”listtittle”&amp;gt;), link para acesso ao site (&amp;lt;a href…&amp;gt;), nota (&amp;lt;div class=”rwp-users-score-value”&amp;gt;) e lista dos episódios para download (&amp;lt;div class=”list”).&lt;/p&gt;

&lt;p&gt;Para a visualização desses dados é criado uma estrutura html, onde dentro de uma tabela são adicionados dados dos animes referentes a uma página. Dessa forma, cada página possui a sua tabela que foi numerada devidamente. A estrutura em html é salva no arquivo list_anime.html.&lt;/p&gt;

&lt;h2 id=&quot;resultado&quot;&gt;Resultado&lt;/h2&gt;

&lt;p&gt;É possível visualizar o arquivo list_anime.html em um navegador. O bootstrap framework foi utilizado para estilizar o arquivo, que pode ser visto em: http://edsonlead.com/list_anime&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://edsonlead.com/assets/img/post008/figure_1.png&quot; alt=&quot;Lista de animes 1&quot; /&gt;
&lt;img src=&quot;http://edsonlead.com/assets/img/post008/figure_2.png&quot; alt=&quot;Lista de animes 2&quot; /&gt;
&lt;img src=&quot;http://edsonlead.com/assets/img/post008/figure_3.png&quot; alt=&quot;Lista de animes 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Com essa listagem de animes é possível verificar que alguns animes não possui lista de episódios, são eles: Brotherhood: Final Fantasy XV, Cowboy Bebop: Tengoku no Tobira, Darker than Black: Kuro no Keiyakusha Gaiden, Date A Live Movie: Mayuri Judgment, Fukumenkei Noise, Hellsing Ultimate, Isekai no Seikishi Monogatari e Z/X: Ignition.&lt;/p&gt;

&lt;p&gt;De um total de 377 animes postados no site, cerca de 8 desses animes não possui lista de episódios disponíveis para download.&lt;/p&gt;

&lt;h2 id=&quot;considerações&quot;&gt;Considerações&lt;/h2&gt;

&lt;p&gt;Embora seja uma brincadeira, a ideia partiu de dois pequenos comentários que me fizeram sobre o site Saiko &lt;em&gt;“Eu não gosto de lista assim porque demora muito pra carregar a página”&lt;/em&gt; e ainda &lt;em&gt;“O meu adblock bloqueou o site”&lt;/em&gt;. E de fato, o site é muito bom, mas têm esses detalhes que ajudaram nos estudos com raspagem de dados.&lt;/p&gt;

&lt;p&gt;No momento, não se tem melhorias em mente para aplicar ao código-fonte a não ser a refatoração do mesmo. Caso, tenha alguma sugestão fique a vontade para comentar este post. Uma descrição e código-fonte pode ser encontrado em: https://github.com/edsonlead/data_scraping/tree/master/004.&lt;/p&gt;</content><author><name>Edson Araújo</name></author><category term="jupyter notebook" /><category term="data scraping" /><category term="beautifulsoup" /><category term="python" /><summary type="html">Para treinar raspagem de dados foi utilizado como objeto de estudos um site que conheci recentemente. Ele tem um layout bem legal, o webdesigner deixou as marcações html em uma forma aceitável para o nosso estudo, ótimo para download de animes e seus colaboradores dispobilizam o calendário de lançamento dos episódios. Porém, não possui a tradicional lista de animes sem os pôsters e é recheado de propaganda com redirecionamento de páginas (isso me deixa louco kkk), o que é bom para começarmos a brincar. =D</summary></entry><entry><title type="html">Gastos do Cartão Corporativo do Estado do Ceará</title><link href="http://edsonlead.com/gastos-cartao-corporativo-estado-ce/" rel="alternate" type="text/html" title="Gastos do Cartão Corporativo do Estado do Ceará" /><published>2017-12-09T00:00:00-03:00</published><updated>2017-12-09T00:00:00-03:00</updated><id>http://edsonlead.com/gastos-cartao-corporativo-estado-ce</id><content type="html" xml:base="http://edsonlead.com/gastos-cartao-corporativo-estado-ce/">&lt;h2 id=&quot;objetivo&quot;&gt;Objetivo&lt;/h2&gt;

&lt;p&gt;Auxiliar na aprendizagem da técnica de raspagem de dados utilizando Python.&lt;/p&gt;

&lt;h2 id=&quot;o-alvo&quot;&gt;O Alvo&lt;/h2&gt;

&lt;p&gt;Portal da Transparência do Governo do Estado do Ceará. URL: http://transparencia.ce.gov.br/content/planejamento-e-execucao-orcamentaria/despesas/cartao-corporativo&lt;/p&gt;

&lt;h2 id=&quot;o-desafio&quot;&gt;O Desafio&lt;/h2&gt;

&lt;p&gt;Recuperar dados do Portal da Transparência do Governo do Estado do Ceará sobre gastos do cartão corporativo de responsabilidade do Chefe do Poder Executivo, no período de 2015 a 2017. Calcular a média de gastos e desvio padrão anual e plotar os gastos do cartão corporativo.&lt;/p&gt;

&lt;h2 id=&quot;o-algoritmo&quot;&gt;O Algoritmo&lt;/h2&gt;

&lt;p&gt;O algoritmo inicia com a captura da url que possui as três tabelas anuais dos gastos com o cartão corporativo. Onde, primeiramente, são capturados os cabeçalhos de cada tabela. Logo em seguida, os valores de cada mês são tratados.&lt;/p&gt;

&lt;p&gt;Cálculos de média e desvio padrão são realizados utilizando a biblioteca numpy e os gráficos são gerados com o pyplot e o seaborn.&lt;/p&gt;

&lt;h2 id=&quot;resultado&quot;&gt;Resultado&lt;/h2&gt;

&lt;p&gt;É possível gerar as médias e os desvios padrão para os gastos anuais com o cartão corporativo para cada ano (2015, 2016 e 2017).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    Gastos com Cartão Corporativo 2017
    Média dos gastos: R$ 2674.05
    Desvio padrão: R$ 1878.01
    None
    Gastos com Cartão Corporativo 2016
    Média dos gastos: R$ 1016.25
    Desvio padrão: R$ 979.13
    None
    Gastos com Cartão Corporativo 2015
    Média dos gastos: R$ 786.42
    Desvio padrão: R$ 598.68
    None

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;É possível, também, gerar os gráficos para cada ano em Valor (R$) x Mês. Abaixo são apresentados 3 gráficos, onde: a) corresponde ao ano de 2017; b) corresponde ao ano de 2016; c) corresponde ao ano de 2015.&lt;/p&gt;

&lt;p&gt;a) &lt;img src=&quot;/assets/img/post007/figure_2017.png&quot; alt=&quot;Gastos 2017&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b) &lt;img src=&quot;/assets/img/post007/figure_2016.png&quot; alt=&quot;Gastos 2016&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c) &lt;img src=&quot;/assets/img/post007/figure_2015.png&quot; alt=&quot;Gastos 2015&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;considerações&quot;&gt;Considerações&lt;/h2&gt;

&lt;p&gt;A intenção deste pequeno projeto foi somente a de praticar raspagem de dados utilizando Python. Com isso em mente, melhorias serão aplicadas à ele no decorrer do tempo. Essas melhorias estão descritas em: https://github.com/edsonlead/data_scraping/tree/master/003.&lt;/p&gt;

&lt;p&gt;Seria interessante se fosse disponibilizado com o que foi utilizado o cartão corporativo do Estado. Porém, &lt;em&gt;“Nessa página são disponibilizados os gastos com cartão corporativo que está sob responsabilidade do Chefe do Poder Executivo, cujas informações são disponibilizadas com valores sintéticos a fim de não comprometer a segurança almejada, conforme art. 22º, VII, da Lei 15.175/2012”&lt;/em&gt;. Dessa forma, não há como apresentar aqui os motivos do aumento do gasto em comparação com os anos de 2015, 2016 e 2017.&lt;/p&gt;</content><author><name>Edson Araújo</name></author><category term="jupyter notebook" /><category term="data scraping" /><category term="beautifulsoup" /><category term="python" /><summary type="html">Objetivo</summary></entry><entry><title type="html">Hackeando Gastos Governamentais com Python 3</title><link href="http://edsonlead.com/hackeando-gastos-governamentais-com-python-3/" rel="alternate" type="text/html" title="Hackeando Gastos Governamentais com Python 3" /><published>2017-10-13T23:42:33-03:00</published><updated>2017-10-13T23:42:33-03:00</updated><id>http://edsonlead.com/hackeando-gastos-governamentais-com-python-3</id><content type="html" xml:base="http://edsonlead.com/hackeando-gastos-governamentais-com-python-3/">&lt;p&gt;[UPDATE]: 09/11/2017&lt;/p&gt;

&lt;p&gt;Ontem, 12 de outubro, aproveitei para publicar um pequeno projeto que desenvolvi em alguns dias. Postei nos grupos do Facebook Python Brasil e A.P.D.A., além da minha timeline. Obtive um feedback bem legal e maior do que eu esperava. E neste post iremos tratar sobre esse projeto.&lt;/p&gt;

&lt;p&gt;É de conhecimento comum que dá pra fazer várias coisas com uma linguagem de programação. Aprender tudo sobre uma é praticamente impossível, para meros mortais. Por isso, é importante encontrar um foco. Em tese, deve ser algo desafiador e que desperte o interesse de quem está escrevendo os códigos. Eu fui atrás do meu foco, se encontrei eu não sei. Mas estou gostando de raspagem de dados.&lt;/p&gt;

&lt;p&gt;Já acompanho há um tempo o trabalho do Professor Fernando Ashikaga. Ele ministra cursos e palestras sobre raspagem de dados. Acompanhei pelo YouTube uma dessas palestras realizada pela Roadsec SP.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; src=&quot;https://www.youtube.com/embed/pM68J2JA72U&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;A partir dessa palestra eu fiquei ainda mais interessado em raspagem de dados e pensei em me desafiar. E como atualmente se fala bastante em gastos e orçamento do governo, resolvi utilizar o &lt;a href=&quot;http://portaltransparencia.gov.br/&quot; target=&quot;_blank&quot;&gt;Portal da Transparência do Governo Federal&lt;/a&gt; como objeto de estudo.&lt;/p&gt;

&lt;h2 id=&quot;as-ferramentas&quot;&gt;As Ferramentas&lt;/h2&gt;

&lt;p&gt;Comecei meus estudos pela documentação do Beautiful Soup&lt;sup&gt;[1]&lt;/sup&gt;. Tinha que ser com Python. E nisso fui passando algumas noites aprendendo coisas novas, inclusive o Jupyter Notebook&lt;sup&gt;[2]&lt;/sup&gt;. Eu utilizava mais o vim e o iPython. O Pyplot&lt;sup&gt;[3]&lt;/sup&gt; foi utilizado para a plotagem dos gráficos.&lt;/p&gt;

&lt;p&gt;Uma definição rápida sobre o Beautiful Soup:&lt;/p&gt;

&lt;blockquote&gt;&quot;Beautiful Soup &amp;eacute; uma biblioteca Python para extrair dados de arquivos HTML e XML. Ele funciona com o seu analisador favorito para fornecer maneiras idiom&amp;aacute;ticas de navegar, pesquisar e modificar a &amp;aacute;rvore de an&amp;aacute;lise. Geralmente economiza horas ou dias de trabalho do programador.&quot;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/blockquote&gt;

&lt;p&gt;Agora, uma definição rápida sobre o Jupyter Notebook:&lt;/p&gt;

&lt;blockquote&gt;&quot;O notebook amplia a abordagem baseada em console para a computa&amp;ccedil;&amp;atilde;o interativa em uma dire&amp;ccedil;&amp;atilde;o qualitativamente nova, fornecendo uma aplica&amp;ccedil;&amp;atilde;o baseada na web adequada para capturar todo o processo de computa&amp;ccedil;&amp;atilde;o: desenvolvimento, documenta&amp;ccedil;&amp;atilde;o e execu&amp;ccedil;&amp;atilde;o de c&amp;oacute;digo, al&amp;eacute;m de comunicar os resultados.&quot;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/blockquote&gt;

&lt;p&gt;E sobre o Pyplot:&lt;/p&gt;

&lt;blockquote&gt;&quot;Matplotlib.pyplot &amp;eacute; uma cole&amp;ccedil;&amp;atilde;o de fun&amp;ccedil;&amp;otilde;es de estilo de comando que fazem Matplotlib funcionar como MATLAB. Cada fun&amp;ccedil;&amp;atilde;o pyplot faz alguma altera&amp;ccedil;&amp;atilde;o em uma figura: por exemplo, cria uma figura, cria uma &amp;aacute;rea de tra&amp;ccedil;ado em uma figura, tra&amp;ccedil;a algumas linhas em uma &amp;aacute;rea de tra&amp;ccedil;ado, decora o gr&amp;aacute;fico com r&amp;oacute;tulos, etc.&quot;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;o-desafio&quot;&gt;O Desafio&lt;/h2&gt;

&lt;p&gt;O desafio teve como objetivo auxiliar na aprendizagem da técnica de raspagem de dados. Ele foi: realizar raspagem de dados no Portal da Transparência e apresentar graficamente os gastos diretos de alguns órgãos superiores, desde o início da inserção dos dados no portal até o ano atual. Os órgãos escolhidos foram: Presidência da República; Ministério da Ciência, Tecnologia, Inovação e Comunicações; Ministério da Educação; Ministério da Previdência Social; Ministério da Saúde; Ministério do Meio Ambiente; e Ministério do Esporte. Nenhum motivo especial foi utilizado na escolha desses órgãos.&lt;/p&gt;

&lt;p&gt;Para isso, o primeiro passo foi verificar os padrões tanto das urls quanto do html das páginas, além de identificar os dados que devem ser extraídos. O html da página é igual para todos os anos e órgãos superiores, e os dados se encontram exatamente dentro das mesmas posições e marcações html. Depois de anotar esses padrões, passamos para o algoritmo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post006/post06-portal.png&quot; alt=&quot;Portal Transparencia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post006/post06-portal-fonte.png&quot; alt=&quot;Portal Transparencia Fonte&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;o-algoritmo&quot;&gt;O Algoritmo&lt;/h2&gt;

&lt;p&gt;Basicamente, o algorimto inicia com a captura da url referente a cada órgão superior, captura os dois valores de “class=colunaValor” pertencente a marcação “
&amp;lt;td&amp;gt;”, sendo o de interesse o segundo que é refente ao valor destinado ao órgão. Após isso, temos um tratamento para retirar o que não for de interesse, deixando apenas o valor do segundo  “class=colunaValor”. O valor de cada ano, após passar por esse tratamento, é adicionado dentro de uma lista. Essa string deve ser convertida em float para colocar todos os valores em uma única unidade, pois, como os gráficos devem representar esses dados, nada melhor do que deixá-los da forma mais amigável possível. A unidade escolhida foi bilhão de reais com base em todos os dados.&lt;/p&gt;

&lt;p&gt;Dessa forma, temos para cada órgão superior uma lista de valores em bilhões de reais desde o ano de 2004 até o ano de 2017. Com isso, junto com uma lista contendo os anos (2004, 2005…, 2017), os gráficos foram plotados da forma Em bilhões de R$ (eixo y) X Ano (eixo x) para cada um deles. O código também possui uma função para plotar todos os órgãos em um único gráfico ou escolher quais queremos comparar.&lt;/p&gt;

&lt;h2 id=&quot;resultados&quot;&gt;Resultados&lt;/h2&gt;

&lt;p&gt;É possível gerar os gráficos por órgão superior, isso totaliza 7 gráficos. Somado a isso, o código permite plotar gráficos com mais de um órgão superior, o que é ideal quando se quer comparar gráficos. Abaixo são apresentados 4 gráficos, onde: a) compara os gastos entre todos os órgãos superiores já citados; b) mostra os gastos com a educação; c) mostra os gastos com a saúde; d) mostra os gastos com a previdência privada; e e) mostra os gastos com a presidência da república.&lt;/p&gt;

&lt;p&gt;a) &lt;img src=&quot;/assets/img/post006/post06-graf01.png&quot; alt=&quot;Gráfico 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b) &lt;img src=&quot;/assets/img/post006/post06-graf02.png&quot; alt=&quot;Gráfico 02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c) &lt;img src=&quot;/assets/img/post006/post06-graf03.png&quot; alt=&quot;Gráfico 03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;d) &lt;img src=&quot;/assets/img/post006/post06-graf04.png&quot; alt=&quot;Gráfico 04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;e) &lt;img src=&quot;/assets/img/post006/post06-graf05.png&quot; alt=&quot;Gráfico 04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A intenção deste pequeno projeto foi somente a de aprender e praticar raspagem de dados utilizando Python. Em relação as análises acerca do momento econômico e político no qual o País vive(u) fica por conta do leitor. Vale ressaltar que esses valores são os divulgados pelo próprio Governo.&lt;/p&gt;

&lt;p&gt;O código completo pode ser encontrado no meu GitHub: &lt;a href=&quot;https://github.com/edsonlead/data_scraping/blob/master/001/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/edsonlead/data_scraping/blob/master/001/&lt;/a&gt;. Ainda irei aplicar algumas melhorias e quem sabe outras funções. Caso tenha alguma sugestão ou comentário, faça bom uso das issues: &lt;a href=&quot;https://github.com/edsonlead/data_scraping/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/edsonlead/data_scraping/issues&lt;/a&gt; ou no espaço para comentários aqui neste post.&lt;/p&gt;

&lt;blockquote&gt;Agrade&amp;ccedil;o ao Juliano Garcia, Anderson Rezende e Roberto Sousa pela ajuda na representa&amp;ccedil;&amp;atilde;o gr&amp;aacute;fica dos dados, ao Prof Fernando Ashikaga pela inspira&amp;ccedil;&amp;atilde;o e divulga&amp;ccedil;&amp;atilde;o dos seus conhecimentos. E a todos que deram um feedback nas publica&amp;ccedil;&amp;otilde;es que postei. Voc&amp;ecirc;s me motivaram ainda mais.&lt;/blockquote&gt;

&lt;p&gt;Obrigado por ler até aqui. :)&lt;/p&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;p&gt;1 &lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2 &lt;a href=&quot;http://jupyter-notebook.readthedocs.io/en/latest/notebook.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://jupyter-notebook.readthedocs.io/en/latest/notebook.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3 &lt;a href=&quot;https://matplotlib.org/users/pyplot_tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://matplotlib.org/users/pyplot_tutorial.html&lt;/a&gt;&lt;/p&gt;</content><author><name>Edson Araújo</name></author><category term="jupyter notebook" /><category term="data scraping" /><category term="beautifulsoup" /><category term="python" /><summary type="html">[UPDATE]: 09/11/2017</summary></entry><entry><title type="html">Warning: An error occurred while preparing SDK package Google APIs : No space left on device</title><link href="http://edsonlead.com/warning-an-error-occurred-while-preparing-sdk-package-google-apis-no-space-left-on-device/" rel="alternate" type="text/html" title="Warning: An error occurred while preparing SDK package Google APIs : No space left on device" /><published>2017-09-25T08:00:06-03:00</published><updated>2017-09-25T08:00:06-03:00</updated><id>http://edsonlead.com/warning-an-error-occurred-while-preparing-sdk-package-google-apis-no-space-left-on-device</id><content type="html" xml:base="http://edsonlead.com/warning-an-error-occurred-while-preparing-sdk-package-google-apis-no-space-left-on-device/">&lt;p&gt;Aqui trataremos de solucionar um “erro” que poderá ocorrer durante a instalação de pacotes necessários para o desenvolvimento móvel para Android. Na ocasião, o mesmo acontecia na instalação tanto através do ./sdkmanager via linha de comando quanto pelo Android Studio.
O problema é claro:&lt;/p&gt;
&lt;blockquote&gt;&quot;No space left on device&quot;&lt;/blockquote&gt;

&lt;p&gt;Mas como poderia ser possível se o disco possuía espaço o suficiente?&lt;/p&gt;

&lt;p&gt;Pesquisando pela Internet, foi possível verificar que os downloads realizados dos pacotes no SDK Manager são gravados no diretório /tmp. Ou seja, não havia espaço o suficiente para que o download fosse completado e que fosse possível dar seguimento à instalação do mesmo.&lt;/p&gt;

&lt;p&gt;Como no momento da instalação do meu SO eu não reservei uma partição para o /tmp, o mesmo recebia uma alocação automática de disco com 50% do total de memória RAM da máquina sempre que o systemd inicializava.&lt;/p&gt;

&lt;p&gt;Diante disso encontrei duas alternativas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reparticionar o disco (fora que quest&amp;atilde;o)&lt;/li&gt;
&lt;li&gt;Criar um link do /tmp para a home do meu usu&amp;aacute;rio&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O número 2 funcionou no início, mas logo não funcionou como o desejado. Mas, depois de voltar a reler sobre disco rígido no &lt;a href=&quot;http://www.guiafoca.org/cgs/guia/iniciante/ch-disc.html&quot; target=&quot;_blank&quot;&gt;Guia Foca GNU/Linux&lt;/a&gt;, veio a sacada com o arquivo /etc/fstab.&lt;/p&gt;

&lt;p&gt;Para quem não sabe, o arquivo /etc/fstab:&lt;/p&gt;

&lt;blockquote&gt;permite que as parti&amp;ccedil;&amp;otilde;es do sistema sejam montadas facilmente especificando somente o dispositivo ou o ponto de montagem&lt;sub&gt;1&lt;/sub&gt;&lt;/blockquote&gt;

&lt;p&gt;Traduzindo:&lt;/p&gt;

&lt;blockquote&gt;Basta especificar o diret&amp;oacute;rio /tmp e alocar o espa&amp;ccedil;o de disco necess&amp;aacute;rio &amp;agrave; ele&lt;/blockquote&gt;

&lt;p&gt;Com isso, no arquivo /etc/fstab foi inserido a seguinte linha:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tmpfs /tmp tmpfs defaults,size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8g 0 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basicamente, temos a partição que queremos montar (tmpfs), o ponto de montagem (/tmp), o tipo de sistemas de arquivos (tmpfs), as opções (defaults, size=8g) onde inserimos o tamanho da alocação de disco para o diretório /tmp, o dump sem backup (0) e a ordem (0) para que não seja verificado na inicialização do sistema.&lt;/p&gt;

&lt;p&gt;O arquivo /etc/fstab ficará semelhante a isso:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post005/post05-fstab.png&quot; alt=&quot;Fstab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dessa forma, basta realizar o reboot da máquina, prosseguir com a instalação dos pacotes para o desenvolvimento móvel para Android e ser feliz HA-HA.&lt;/p&gt;

&lt;h2 id=&quot;referência&quot;&gt;Referência&lt;/h2&gt;

&lt;p&gt;1.&lt;a href=&quot;http://www.guiafoca.org/cgs/guia/iniciante/ch-disc.html&quot; target=&quot;_blank&quot;&gt; http://www.guiafoca.org/cgs/guia/iniciante/ch-disc.html&lt;/a&gt;&lt;/p&gt;</content><author><name>Edson Araújo</name></author><category term="fstab" /><category term="android" /><category term="no space left on device" /><summary type="html">Aqui trataremos de solucionar um “erro” que poderá ocorrer durante a instalação de pacotes necessários para o desenvolvimento móvel para Android. Na ocasião, o mesmo acontecia na instalação tanto através do ./sdkmanager via linha de comando quanto pelo Android Studio. O problema é claro: &quot;No space left on device&quot;</summary></entry><entry><title type="html">Fedora 26: atualizando o F25…</title><link href="http://edsonlead.com/fedora-26-atualizando-o-f25/" rel="alternate" type="text/html" title="Fedora 26: atualizando o F25..." /><published>2017-07-14T11:22:43-03:00</published><updated>2017-07-14T11:22:43-03:00</updated><id>http://edsonlead.com/fedora-26-atualizando-o-f25</id><content type="html" xml:base="http://edsonlead.com/fedora-26-atualizando-o-f25/">&lt;p&gt;No dia 11 de julho, terça-feira, o &lt;a href=&quot;https://fedoramagazine.org/fedora-26-is-here/&quot; target=&quot;_blank&quot;&gt;Fedora 26 foi lançado &lt;/a&gt;. Várias novidades vieram nessa nova versão, uma delas foi o lançamento do &lt;a href=&quot;https://labs.fedoraproject.org/python-classroom/&quot; target=&quot;_blank&quot;&gt;Python Classroom Labs&lt;/a&gt;. E como um bom usuário do fedora, resolvi atualizar o Fedora 25 do meu notebook.&lt;/p&gt;

&lt;p&gt;Sim! Atualizar a versão 25 para a 26 do Fedora sem que haja a necessidade de fazer download de .iso. Caso você queira instalar o Fedora 26 do zero pode &lt;a href=&quot;https://getfedora.org/pt/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;realizar o download aqui&lt;/a&gt;. Nesse caso, eu prefiro o &lt;a href=&quot;https://torrent.fedoraproject.org/torrents/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;download por torrent&lt;/a&gt; devido a minha conexão.&lt;/p&gt;

&lt;h2 id=&quot;atualizando-o-sistema&quot;&gt;Atualizando o sistema…&lt;/h2&gt;

&lt;p&gt;Para atualizar o Fedora 25 segui, basicamente, os mesmos passos que utilizei para o Fedora 24 no ano passado. Você pode verificar o passo a passo no artigo do &lt;a href=&quot;https://fedoramagazine.org/upgrading-fedora-25-fedora-26/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fedora Magazine: Upgrading Fedora 25 to Fedora 26&lt;/a&gt;. Os passos/comandos que utilizei são os mesmos que estão presentes nesse artigo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atualizar para a última versão do Fedora 25:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf upgrade &lt;span class=&quot;nt&quot;&gt;--refresh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instalar o plugin DNF:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf install dnf-plugin-system-upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Iniciar a atualização:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf system-upgrade download &lt;span class=&quot;nt&quot;&gt;--releasever&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;26 &lt;span class=&quot;nt&quot;&gt;--allowerasing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reboot e atualização:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf system-upgrade reboot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Particularmente, eu obtive um erro de conflito de arquivos (Error: Transaction check error:) o qual solucionei após verificar do que se tratava o arquivo conflitante e o removi.&lt;/p&gt;

&lt;h2 id=&quot;pós-atualização&quot;&gt;Pós-atualização…&lt;/h2&gt;

&lt;p&gt;Como a atualização do Fedora não interfere nas configurações dos programas que utilizo, não tive a necessidade de instalar e configurar pacotes que eu já utilizava na versão anterior.&lt;/p&gt;

&lt;p&gt;A tela de login após a instalação ficou bem legal com esse wallpaper padrão do Fedora 26:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post004/post04-f26.jpg&quot; alt=&quot;Fedora 26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mas o que mais chamou a minha atenção foram o ícones Breeze:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post004/post04-breeze.png&quot; alt=&quot;Breeze&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E essa é a minha área de trabalho. Utilizo o Mate como interface desktop:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post004/post04-desktop.png&quot; alt=&quot;Desktop F26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Caso você deseja verificar as notas de lançamento do Fedora 26, elas estão disponíveis no &lt;a href=&quot;https://docs.fedoraproject.org/en-US/Fedora/26/html/Release_Notes/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fedora Project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E você, já está utilizando a nova versão do Fedora?&lt;/p&gt;</content><author><name>Edson Araújo</name></author><category term="fedora" /><category term="upgrading" /><category term="mate" /><summary type="html">No dia 11 de julho, terça-feira, o Fedora 26 foi lançado . Várias novidades vieram nessa nova versão, uma delas foi o lançamento do Python Classroom Labs. E como um bom usuário do fedora, resolvi atualizar o Fedora 25 do meu notebook.</summary></entry><entry><title type="html">Como instalar o turtle no Fedora 25</title><link href="http://edsonlead.com/como-instalar-o-turtle-no-fedora-25/" rel="alternate" type="text/html" title="Como instalar o turtle no Fedora 25" /><published>2017-07-07T19:35:22-03:00</published><updated>2017-07-07T19:35:22-03:00</updated><id>http://edsonlead.com/como-instalar-o-turtle-no-fedora-25</id><content type="html" xml:base="http://edsonlead.com/como-instalar-o-turtle-no-fedora-25/">&lt;p&gt;O turtle é um módulo Python que possui funcionalidades que auxiliam na realização de desenhos com comandos bem simples. Teremos um post mais detalhado sobre esse assunto, este tratará somente da instalação do turtle no Fedora 25.&lt;/p&gt;

&lt;p&gt;Para utilizar o módulo turtle é necessário que o pacote Tkinter esteja instalado. Então, seguimos no terminal com o comando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; dnf search python3-tk&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O comando acima serve para pesquisar pacotes. Após isso, instale de acordo com a sua arquiteura:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf install python3-tkinter.x86_64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pronto! Vamos testar?&lt;/p&gt;

&lt;p&gt;Acesse o Python interativo e utilize os comandos como apresentados abaixo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;May&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20161221&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hat&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linux&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;copyright&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;turtle&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turtle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Turtle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O resultado será algo como:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post003/post03-turtle.png&quot; alt=&quot;Resultado&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Muito bem! O módulo turtle já está funcionando. :)&lt;/p&gt;</content><author><name>Edson Araújo</name></author><category term="turtle" /><category term="fedora" /><summary type="html">O turtle é um módulo Python que possui funcionalidades que auxiliam na realização de desenhos com comandos bem simples. Teremos um post mais detalhado sobre esse assunto, este tratará somente da instalação do turtle no Fedora 25.</summary></entry><entry><title type="html">Gnuplot: ferramenta para criação de gráficos</title><link href="http://edsonlead.com/gnuplot-ferramenta-para-criacao-de-graficos/" rel="alternate" type="text/html" title="Gnuplot: ferramenta para criação de gráficos" /><published>2017-06-12T09:15:54-03:00</published><updated>2017-06-12T09:15:54-03:00</updated><id>http://edsonlead.com/gnuplot-ferramenta-para-criacao-de-graficos</id><content type="html" xml:base="http://edsonlead.com/gnuplot-ferramenta-para-criacao-de-graficos/">&lt;p&gt;Embora receba em seu nome o termo GNU, essa ferramenta não possui uma licença ligada a GPL e muito menos possui relação com o projeto GNU. O &lt;a href=&quot;http://gnuplot.info&quot; target=&quot;_blank&quot;&gt;Gnuplot&lt;/a&gt; trata-se de uma freeware, ou seja, você não precisa pagar para utilizá-lo mas também não possui permissão para modificar o seu código fonte&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;O gnuplot é uma ferramenta multiplataforma de linha de comando para criação de gráficos. Foi criado para auxiliar estudantes e cientistas a visualizar de forma interativa dados e funções matemáticas. Outras aplicações como o Octave&lt;sup&gt;2&lt;/sup&gt;, por exemplo, utiliza o gnuplot como engine para plotar gráficos.&lt;/p&gt;

&lt;p&gt;Ele dá suporte a plotagem de gráficos 2D, 3D e gif, e scripts podem ser utilizados. Scripts? Sim, scripts. O legal de trabalhar com essa ferramenta por linha de comando é a possibilidade de plotar gráficos tanto de forma interativa quanto por meio de scripts. E é isso o que veremos neste post.&lt;/p&gt;

&lt;h2 id=&quot;instalação-do-gnuplot&quot;&gt;Instalação do gnuplot&lt;/h2&gt;

&lt;p&gt;O download do gnuplot pode ser realizado em seu repositório no sourceforget (&lt;a href=&quot;https://sourceforge.net/projects/gnuplot/files/&quot; target=&quot;_blank&quot;&gt;repositório gnuplot&lt;/a&gt;). Em sistemas Linux é comum que o gnuplot esteja em seus repositórios. Então, para instalá-lo basta seguir um dos seguintes comandos:&lt;/p&gt;

&lt;p&gt;Para dpkg (exemplo: Debian):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install gnuplot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Para rpm (exemplo: Fedora):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf install gnuplot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;executando-o-gnuplot&quot;&gt;Executando o gnuplot&lt;/h2&gt;

&lt;p&gt;Após a instalação, no terminal, podemos executar o gnuplot da seguinte maneira: $ gnuplot. Na forma interativa podemos inserir alguns comandos e o gráfico só será plotado ao inserir o comando plot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post002/post02-gnuplot.png&quot; alt=&quot;Gnuplot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uma outra forma de utilizá-lo é através de scripts com extensão .plt e que segue o seguinte formato de execução $ gnuplot arquivo.plt.&lt;/p&gt;

&lt;h2 id=&quot;exemplos-práticos&quot;&gt;Exemplos Práticos&lt;/h2&gt;

&lt;p&gt;Aqui é apresentado três exemplos de utilização do gnuplot. Não é a intenção decifrar linha por linha dos escripts, mas sim, dar noção de funcionamento da ferramenta e plotagem dos gráficos. O primeiro exemplo irá abordar o uso do gnuplot via linha de comando e os dois últimos via scripts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Gráfico da função seno&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Esse primeiro exemplo é algo bem básico, apenas para familiarização, que podemos trabalhar direto no terminal. Acessando o gnuplot realizamos a plotagem da função seno que abrirá uma janela apresentando o gráfico dessa função. Logo após, temos a inserção de dois comandos responsáveis por setar os intervalos em valores para os eixos x e y. Para que essas alterações possam ser visualizadas faz-se necessário um replot.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gnuplot
gnuplot&amp;gt; plot sin&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
gnuplot&amp;gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;xrange &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:10]
gnuplot&amp;gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;yrange &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;:2]
gnuplot&amp;gt; replot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Através da janela do gnuplot existe a possibilidade de salvar o gráfico em formato PDF, SVG e imagem. O resultado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post002/post02-dados1.png&quot; alt=&quot;Gnuplot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Utilizando dados de arquivo&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Neste exemplo trabalhamos com dados de um arquivo externo, que foi denominado de dados.txt, e o seu conteúdo é mostrado a seguir:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;    10.835    32.394
    18.714    31.073
    26.593    29.393
    34.472    27.467
    42.352    25.353
    50.231    23.227
    58.110    21.067
    65.989    19.013
    73.868    17.078
    81.748    15.070
    89.627    13.188
    97.506    11.401
   105.385     9.723
   113.264     8.132
   121.144     6.581
   129.023     5.268
   136.902     3.964
   144.781     2.781
   152.660     1.627
   160.540     0.621
   168.419    -0.317
   176.298    -1.153
   184.177    -1.925
   192.056    -2.820
   199.936    -3.599
   207.815    -4.235
   215.694    -4.780
   223.573    -5.211
   231.452    -5.484
   239.332    -5.752
   247.211    -6.004
   255.090    -6.185
   262.969    -6.490
   270.848    -6.566
   278.728    -6.783
   286.607    -6.702
   294.486    -6.634
   302.365    -6.554
   310.244    -6.436
   318.124    -6.213
   326.003    -6.103
   333.882    -5.890
   341.761    -5.789
   349.640    -5.545
   357.520    -5.442
   365.399    -5.113&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As colunas representam os eixos cartesianos x e y, respectivamente. O script para a construção do gráfico foi denominado de dados.plt, onde a fonte escolhida para o gráfico foi Verdana em negrito de tamanho 9. Diferente do exemplo anterior, este salva o gráfico em imagem com o nome de dados.png e possui um enconding que pode ser necessário para mostrar palavras acentuadas e o “ç”. Nele também foi configurado para que os valores do eixo x sejam mostrados de 100 em 100 e os do eixo y de 10 em 10. Por fim, é inserido o arquivo que possui os dados a serem apresentados graficamente, assim como o nome da linha e a sua cor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal pngcairo enhanced font &lt;span class=&quot;s1&quot;&gt;'Verdana-Bold,9'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;output &lt;span class=&quot;s1&quot;&gt;'dados.png'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;encoding iso_8859_1
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;title &lt;span class=&quot;s2&quot;&gt;&quot;Gráfico utilizando dados de arquivo&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;xlabel &lt;span class=&quot;s2&quot;&gt;&quot;Eixo X&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;ylabel &lt;span class=&quot;s2&quot;&gt;&quot;Eixo y&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;xtics 100
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;ytics 10
plot &lt;span class=&quot;s2&quot;&gt;&quot;dados.txt&quot;&lt;/span&gt; title &lt;span class=&quot;s2&quot;&gt;&quot;Linha verde&quot;&lt;/span&gt; lc rgb &lt;span class=&quot;s2&quot;&gt;&quot;green&quot;&lt;/span&gt; with lines&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O resultado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post002/post02-dados.png&quot; alt=&quot;Gnuplot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Utilizando dados de mais de um arquivo&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Aqui o arquivo dados.txt foi dividido em outros dois, onde um possui somente a primeira coluna e outro somente a segunda coluna. O script anterior também foi alterado setando intervalos para os eixos cartesianos iniciando-os pelo valor zero. E a legenda do gráfico recebeu estilo de box e espaçamento. Observe que os arquivos foram inseridos dentro do mesmo plot.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;terminal pngcairo enhanced font &lt;span class=&quot;s1&quot;&gt;'Verdana-Bold,9'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;output &lt;span class=&quot;s1&quot;&gt;'dados2.png'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;encoding iso_8859_1
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;title &lt;span class=&quot;s2&quot;&gt;&quot;Gráfico utilizando dados de arquivo&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;xlabel &lt;span class=&quot;s2&quot;&gt;&quot;Eixo X&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;ylabel &lt;span class=&quot;s2&quot;&gt;&quot;Eixo y&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;xrange &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:20]
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;yrange &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:50]
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;key top font &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; box 3 spacing 3
plot &lt;span class=&quot;s2&quot;&gt;&quot;dados1.txt&quot;&lt;/span&gt; title &lt;span class=&quot;s2&quot;&gt;&quot;Linha vermelha&quot;&lt;/span&gt; lc rgb &lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt; with lines,&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;dados2.txt&quot;&lt;/span&gt; title &lt;span class=&quot;s2&quot;&gt;&quot;Linha azul&quot;&lt;/span&gt; lc rgb &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt; with lines&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O resultado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post002/post02-dados2.png&quot; alt=&quot;Gnuplot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mais-informações&quot;&gt;Mais informações&lt;/h2&gt;

&lt;p&gt;Para maiores informações acerca de software é sempre importante verificar a sua man page, no caso: $ man gnuplot&lt;/p&gt;

&lt;p&gt;E, logicamente, a documentação (&lt;a href=&quot;http://gnuplot.info/docs_5.0/gnuplot.pdf&quot; target=&quot;_blank&quot;&gt;gnuplot.pdf&lt;/a&gt;) presente no seu site oficial, onde além da documentação consta alguns exemplos (&lt;a href=&quot;http://gnuplot.sourceforge.net/demo_5.0/&quot; target=&quot;_blank&quot;&gt;demo gnuplot&lt;/a&gt;) para testes e aprendizagem.&lt;/p&gt;

&lt;p&gt;Para quem prefere livros, duas recomendações são feitas pelo site oficial do gnuplot. São eles: &lt;a href=&quot;https://www.packtpub.com/big-data-and-business-intelligence/gnuplot-cookbook&quot; target=&quot;_blank&quot;&gt; Phillips, L. gnuplot Cookbook. Packt Publishing, 2012&lt;/a&gt; &lt;a href=&quot;https://www.manning.com/books/gnuplot-in-action-second-edition&quot; target=&quot;_blank&quot;&gt; Janert, P. K. Gnuplot in Action - Understanding Data with Graphs. Manning Publications, 2ª Ed., 2016&lt;/a&gt;&lt;sup&gt;3&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;finalizando&quot;&gt;Finalizando…&lt;/h2&gt;

&lt;p&gt;Aqui tratamos de forma breve sobre uma ferramenta desenvolvida para o meio acadêmico, mas que sem dúvidas pode ser utilizada em outros contextos. Como apresentado, a sua instalação é simples e a sua aprendizagem pode demadar algum tempo dependendo dos estilos que você deseja aplicar em seus gráficos.&lt;/p&gt;

&lt;p&gt;E aí? Você já conhecia o Gnuplot? Já o utilizou? Conhece alguma outra ferramenta alternativa? Pois conte para gente a sua experiência e/ou opinião nos comentários. O seu feedback é sempre bem-vindo.&lt;/p&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;p&gt;1 &lt;a href=&quot;http://www.gnuplot.info/faq/faq.html#x1-120001.7&quot; target=&quot;_blank&quot;&gt;http://www.gnuplot.info/faq/faq.html#x1-120001.7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2 &lt;a href=&quot;https://www.gnu.org/software/octave/&quot; target=&quot;_blank&quot;&gt;https://www.gnu.org/software/octave/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3 &lt;a href=&quot;http://gnuplot.info/books.html&quot; target=&quot;_blank&quot;&gt;http://gnuplot.info/books.html&lt;/a&gt;&lt;/p&gt;</content><author><name>Edson Araújo</name></author><category term="gnuplot" /><category term="gráficos" /><category term="plot" /><summary type="html">Embora receba em seu nome o termo GNU, essa ferramenta não possui uma licença ligada a GPL e muito menos possui relação com o projeto GNU. O Gnuplot trata-se de uma freeware, ou seja, você não precisa pagar para utilizá-lo mas também não possui permissão para modificar o seu código fonte1.</summary></entry><entry><title type="html">Regex - Metas</title><link href="http://edsonlead.com/regex-metas/" rel="alternate" type="text/html" title="Regex - Metas" /><published>2016-08-12T18:00:00-03:00</published><updated>2016-08-12T18:00:00-03:00</updated><id>http://edsonlead.com/regex-metas</id><content type="html" xml:base="http://edsonlead.com/regex-metas/">&lt;h2 id=&quot;introdução&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Neste post iremos tratar sobre os metacaracteres, aquela sopa de letrinhas utilizadas em expressões regulares. Basicamente, são símbolos com poderes especiais, onde cada um possui uma função diferente e que veremos no decorrer dos &lt;em&gt;posts&lt;/em&gt; sobre &lt;em&gt;regex&lt;/em&gt;. Esses símbolos, embora possuam cada um uma simples função, quando unidos podem gerar expressões bem complexas.&lt;/p&gt;

&lt;h2 id=&quot;objetivo&quot;&gt;Objetivo&lt;/h2&gt;

&lt;p&gt;O objetivo deste post é alcançar uma didática que facilite a aprendizagem sobre expressões regulares, simplificando este processo principalmente para quem for iniciante.&lt;/p&gt;

&lt;h2 id=&quot;metacaractere&quot;&gt;Metacaractere&lt;/h2&gt;

&lt;h3 id=&quot;o-que-é&quot;&gt;O que é?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lembra dos meta-humanos lá do &lt;em&gt;Static Shock&lt;/em&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://static.comicvine.com/uploads/original/0/7604/914960-2cgzoyu.jpg&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;Figura 1&lt;sup&gt;[1]&lt;/sup&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Na nossa introdução já definimos o que são os metacaracteres, &lt;em&gt;“são símbolos com poderes especiais, onde cada um possui uma função diferente”&lt;/em&gt;. Lembrando que estamos tratando do significado de metacaractere dentro do contexto de expressões regulares.&lt;/p&gt;

&lt;p&gt;Podemos, também, definir metacaractere como um caractere ou uma sequência dele com algum significado especial em aplicações computacionais. Ou ainda, um caractere especial em um programa ou dados que fornece informações sobre outros caracteres, podendo expressar uma ideia sobre como processar os caracteres que seguem o metacaractere.&lt;/p&gt;

&lt;p&gt;Em suma, precisamos de metacaractere para construirmos nossas expressões regulares.&lt;/p&gt;

&lt;h3 id=&quot;quais-são&quot;&gt;Quais são?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;São vários&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em geral, os metacaracteres utilizados para a construção de expressões regulares são os seguintes: &lt;code&gt;. ? * + ^ $ | [] {} () \&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Veremos agora uma lista com os metacaracteres que farão parte dos nossos estudos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tabela 1.&lt;/strong&gt; Alguns metacaracteres utilizados em expressões regulares.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Metacaractere&lt;/th&gt;
      &lt;th&gt;Nome&lt;/th&gt;
      &lt;th&gt;Função&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.&lt;/td&gt;
      &lt;td&gt;Ponto&lt;/td&gt;
      &lt;td&gt;Um caracter qualquer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td&gt;Opcional&lt;/td&gt;
      &lt;td&gt;Zero ou um&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;*&lt;/td&gt;
      &lt;td&gt;Asteristico&lt;/td&gt;
      &lt;td&gt;Zero, um ou mais&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;+&lt;/td&gt;
      &lt;td&gt;Mais&lt;/td&gt;
      &lt;td&gt;Um ou mais&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^&lt;/td&gt;
      &lt;td&gt;Circunflexo&lt;/td&gt;
      &lt;td&gt;Início da linha&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;$&lt;/td&gt;
      &lt;td&gt;Cifrão&lt;/td&gt;
      &lt;td&gt;Fim da linha&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;|&lt;/td&gt;
      &lt;td&gt;Ou&lt;/td&gt;
      &lt;td&gt;Ou um ou outro&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\&lt;/td&gt;
      &lt;td&gt;Escape&lt;/td&gt;
      &lt;td&gt;Torna literal algum caractere&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\b&lt;/td&gt;
      &lt;td&gt;Borda&lt;/td&gt;
      &lt;td&gt;Início ou fim de palavra&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\1&lt;/td&gt;
      &lt;td&gt;Retrovisor&lt;/td&gt;
      &lt;td&gt;Texto casado no grupo 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;()&lt;/td&gt;
      &lt;td&gt;Grupo&lt;/td&gt;
      &lt;td&gt;Delimita um grupo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[]&lt;/td&gt;
      &lt;td&gt;Lista&lt;/td&gt;
      &lt;td&gt;Lista de caracteres permitidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[^]&lt;/td&gt;
      &lt;td&gt;Lista negada&lt;/td&gt;
      &lt;td&gt;Lista de caracteres proibidos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;{n,m}&lt;/td&gt;
      &lt;td&gt;Chaves&lt;/td&gt;
      &lt;td&gt;De &lt;em&gt;n&lt;/em&gt; até &lt;em&gt;m&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Existem outros, eles dependem da aplicação a qual estamos utilizando, no momento focaremos nesses. :)&lt;/p&gt;

&lt;h3 id=&quot;e-as-categorias&quot;&gt;E as categorias?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hmm…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Já sobre as categorias dos metacaracteres, podemos encontrar materiais que os separam em 4 ou 5 categorias. Particularmente, já encontrei materiais mais completos que abordam uma classificação de até 8 categorias. Mas isso depende da ferramenta que estamos utilizando e no nosso caso focamos em Shell. Então, trataremos das seguintes categorias:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Especificadores&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Quantificadores&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Âncoras&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Agrupamento&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O nome dessas categorias podem variar, o importante é ter a noção da similiaridade que alguns metacaracteres possuem entre si. E essa classificação irá nos ajudar no entendimento do tema. No ponto de vista de quem vos escreve, é interessante conhecermos essa classificação mais por questão de didática, pois, fica mais fácil de aprender agrupando os semelhantes e os detalhando.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Neste post demos continuidade ao tema tratando um pouco sobre os metacaracteres que nada mais são do que símbolos com poderes especiais. Apresentamos quais são os metacaracteres que iremos focar. Reforçando, existem outros dependendo da aplicação computacional que estaremos utilizando. E por fim, conhecemos uma classificação em 4 grupos ou categorias nos quais podemos separar os metacaracteres de acordo com as suas funções.&lt;/p&gt;

&lt;h2 id=&quot;próximo-episódio&quot;&gt;Próximo episódio&lt;/h2&gt;

&lt;p&gt;No próximo &lt;em&gt;post&lt;/em&gt; iremos dar continuidade conhecendo os metacaracteres que pertencem a categoria Especificadores, o por que dessa denominação e alguns exemplos práticos para a nossa fixação.&lt;/p&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;p&gt;[1] - &lt;a href=&quot;https://www.google.com.br/search?q=meta+humano&amp;amp;biw=1356&amp;amp;bih=614&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwiupoK-hL3OAhWGDpAKHfN0CYYQ_AUIBigB#tbm=isch&amp;amp;q=Static+Shock&quot;&gt;Google Images&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;</content><author><name>Edson Araújo</name></author><category term="regex" /><summary type="html">Introdução Neste post iremos tratar sobre os metacaracteres, aquela sopa de letrinhas utilizadas em expressões regulares. Basicamente, são símbolos com poderes especiais, onde cada um possui uma função diferente e que veremos no decorrer dos posts sobre regex. Esses símbolos, embora possuam cada um uma simples função, quando unidos podem gerar expressões bem complexas. Objetivo O objetivo deste post é alcançar uma didática que facilite a aprendizagem sobre expressões regulares, simplificando este processo principalmente para quem for iniciante. Metacaractere O que é? Lembra dos meta-humanos lá do Static Shock? Figura 1[1]. Na nossa introdução já definimos o que são os metacaracteres, “são símbolos com poderes especiais, onde cada um possui uma função diferente”. Lembrando que estamos tratando do significado de metacaractere dentro do contexto de expressões regulares. Podemos, também, definir metacaractere como um caractere ou uma sequência dele com algum significado especial em aplicações computacionais. Ou ainda, um caractere especial em um programa ou dados que fornece informações sobre outros caracteres, podendo expressar uma ideia sobre como processar os caracteres que seguem o metacaractere. Em suma, precisamos de metacaractere para construirmos nossas expressões regulares. Quais são? São vários Em geral, os metacaracteres utilizados para a construção de expressões regulares são os seguintes: . ? * + ^ $ | [] {} () \. Veremos agora uma lista com os metacaracteres que farão parte dos nossos estudos. Tabela 1. Alguns metacaracteres utilizados em expressões regulares. Metacaractere Nome Função . Ponto Um caracter qualquer ? Opcional Zero ou um * Asteristico Zero, um ou mais + Mais Um ou mais ^ Circunflexo Início da linha $ Cifrão Fim da linha | Ou Ou um ou outro \ Escape Torna literal algum caractere \b Borda Início ou fim de palavra \1 Retrovisor Texto casado no grupo 1 () Grupo Delimita um grupo [] Lista Lista de caracteres permitidos [^] Lista negada Lista de caracteres proibidos {n,m} Chaves De n até m Existem outros, eles dependem da aplicação a qual estamos utilizando, no momento focaremos nesses. :) E as categorias? Hmm… Já sobre as categorias dos metacaracteres, podemos encontrar materiais que os separam em 4 ou 5 categorias. Particularmente, já encontrei materiais mais completos que abordam uma classificação de até 8 categorias. Mas isso depende da ferramenta que estamos utilizando e no nosso caso focamos em Shell. Então, trataremos das seguintes categorias: Especificadores Quantificadores Âncoras Agrupamento O nome dessas categorias podem variar, o importante é ter a noção da similiaridade que alguns metacaracteres possuem entre si. E essa classificação irá nos ajudar no entendimento do tema. No ponto de vista de quem vos escreve, é interessante conhecermos essa classificação mais por questão de didática, pois, fica mais fácil de aprender agrupando os semelhantes e os detalhando. Conclusão Neste post demos continuidade ao tema tratando um pouco sobre os metacaracteres que nada mais são do que símbolos com poderes especiais. Apresentamos quais são os metacaracteres que iremos focar. Reforçando, existem outros dependendo da aplicação computacional que estaremos utilizando. E por fim, conhecemos uma classificação em 4 grupos ou categorias nos quais podemos separar os metacaracteres de acordo com as suas funções. Próximo episódio No próximo post iremos dar continuidade conhecendo os metacaracteres que pertencem a categoria Especificadores, o por que dessa denominação e alguns exemplos práticos para a nossa fixação. Referências [1] - Google Images</summary></entry><entry><title type="html">Regex - Starting</title><link href="http://edsonlead.com/regex-starting/" rel="alternate" type="text/html" title="Regex - Starting" /><published>2016-07-03T13:00:00-03:00</published><updated>2016-07-03T13:00:00-03:00</updated><id>http://edsonlead.com/regex-starting</id><content type="html" xml:base="http://edsonlead.com/regex-starting/">&lt;h2 id=&quot;introdução&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Neste post trataremos de um tema que tenho focado nos últimos meses. Caso você seja um usuário de derivados do Unix já deve ter se deparado com este tema pelo menos por &lt;em&gt;command line&lt;/em&gt;. Sem dúvidas é bem legal de se trabalhar com expressões regulares, assim como é estudá-las. Dá pra se sentir um ser supremo diante dos seus amigos de TI que não conseguem entender essa sopa de (meta)?caracteres, que no final é algo bem simples de entender. A complexidade dessas expressões dependem da sua prática e do problema que você procura solucionar.&lt;/p&gt;

&lt;h3 id=&quot;objetivo&quot;&gt;Objetivo&lt;/h3&gt;

&lt;p&gt;O objetivo deste post: simplificar as coisas. Mostrar de forma fácil e objetiva que expressões regulares são divertidas e fáceis de aprender. Na verdade, é como a maioria das coisas em computação, você somente aprende praticando. Caso você seja um iniciante no assunto, iremos aqui definir um norte para os seus estudos. Caso o contrário, seja bem vindo para complementar este texto com seus comentários pertinentes ao tema com o intuito de ajudar o estagiário.&lt;/p&gt;

&lt;h2 id=&quot;expressões-regulares&quot;&gt;Expressões regulares&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tudo (in)?certo para começarmos(?|!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Neste item vamos conhecer um pouco da história das expressões regulares para entendermos as suas origens e os seus aspectos. Isso parece coisa de humanas, mas é interessante conhecermos um pouco da ferramenta que utilizaremos, o que de fato ela é e em que momentos ela nos poderá ser útil.&lt;/p&gt;

&lt;h3 id=&quot;a-história&quot;&gt;A História&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Uma imagem vale mais do que mil palavras&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://brainmoda.files.wordpress.com/2013/01/history.png&quot; alt=&quot;Vamos Simplificar&quot; title=&quot;Resumo da ópera&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figura 1&lt;sup&gt;[1]&lt;/sup&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Warren McCulloch&lt;/em&gt; e &lt;em&gt;Walter Pitts&lt;/em&gt;, em 1943, publicaram um trabalho, &lt;a href=&quot;http://link.springer.com/article/10.1007/BF02478259&quot;&gt;&lt;em&gt;A logical calculus of the ideas immanent in nervous activity&lt;/em&gt;&lt;/a&gt;, no qual foi desenvolvido uma teoria em relação ao funcionamento dos neurônios humanos. Em 1956, o matemático &lt;em&gt;Stephen Kleene&lt;/em&gt; desenvolveu algebricamente esse modelo e apresentou em uma publicação, &lt;a href=&quot;http://www.dlsi.ua.es/~mlf/nnafmc/papers/kleene56representation.pdf&quot;&gt;&lt;em&gt;Representation of events in nerve nets and finite automata&lt;/em&gt;&lt;/a&gt;, neste estudo símbolos foram utilizados para representar seus &lt;em&gt;regular sets&lt;/em&gt;&lt;sup&gt;[1]&lt;/sup&gt;. A partir daí nasceram as expressões regulares.&lt;/p&gt;

&lt;p&gt;Porém, apenas em 1968, &lt;em&gt;Ken Thompson&lt;/em&gt;, o pioneiro do Unix, publicou o seu trabalho &lt;a href=&quot;http://www.fing.edu.uy/inco/cursos/intropln/material/p419-thompson.pdf&quot;&gt;&lt;em&gt;Regular expression search algorithm&lt;/em&gt;&lt;/a&gt;. Ele implementou seu algoritmo de busca no editor QED. Posteriormente, esse editor virou o editor padrão dos sistemas Unix, o Ed. Ele aceitava expressões regulares seguindo essa sintaxe:&lt;code&gt;g/&amp;lt; regular expression &amp;gt;/p&lt;/code&gt;, onde, &lt;em&gt;g&lt;/em&gt; de &lt;em&gt;Global&lt;/em&gt; e &lt;em&gt;p&lt;/em&gt; de &lt;em&gt;Print&lt;/em&gt; (&lt;em&gt;Global Regular Expression Print&lt;/em&gt;). Agora você sabe esse detalhe sobre o &lt;code&gt;grep&lt;/code&gt; e a sua raiz com as expressões regulares. Em 1979, &lt;em&gt;Alfred Aho&lt;/em&gt; o extendeu para o &lt;code&gt;egrep&lt;/code&gt;&lt;sup&gt;[1]&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;sed&lt;/code&gt; e &lt;code&gt;awk&lt;/code&gt; foram desenvolvidos, mas o primeiro pacote de expressão regular surgiu na linguagem C, em 1986, e de forma gratuita. A partir de então o seu uso foi ampliado para diversos programas e linguagens.&lt;/p&gt;

&lt;h3 id=&quot;o-que-é&quot;&gt;O que é?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“MAZUQUEISSO? MAZUQUEISSO? MAZUQUEISSO?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basicamente, são caracteres com funções especiais que formam uma expressão que é interpretada como regra para “casar” alguma coisa ou, por muitas vezes, partes de textos. Por “casar” devemos entender como um &lt;em&gt;match&lt;/em&gt; (sim, isso também me lembra o &lt;em&gt;Tinder&lt;/em&gt;), encaixar, bateu, confere e etc… Pode-se dizer, também, que expressão regular é uma forma de procurar um texto, uma sequência de caracteres, ou trecho em determinadas posições de acordo com um padrão especificado. E por “padrão” devemos entender como aquilo que se quer encontrar com a ajuda da regex.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Um detalhe:&lt;/strong&gt; será adotado a terminologia &lt;code&gt;regex&lt;/code&gt; neste e nos próximos posts, caso queira utilizar o termo ER fique à vontade. Eu não utilizo esse termo porque ele me lembra de Entidade e Relacionamento lá de banco de dados.&lt;/p&gt;

&lt;h3 id=&quot;para-que-serve&quot;&gt;Para que serve?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Para um monte de coisas&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Serve para várias tarefas que envolvam busca, extrações, manipulações e validações de padrões em textos. Particularmente, a pessoa que vos escreve utiliza bastante para converter formatos de arquivos e para extrair informações específicas em arquivos de &lt;em&gt;output&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se você quiser uma lista, segue aí:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Validação de campos de formulários&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Encontrar palavras reservadas&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Filtragem de informações em banco de dados&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Filtro de busca por campos (nome, idade, cpf, rg e etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Filtro de grep/egrep&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Substituição de caracteres&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conversão de arquivos&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;E etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exemplos&quot;&gt;Exemplos&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;O mais esperado&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Veremos a seguir alguns exemplos para testarmos no Terminal. Caso você seja teimoso e não queira migrar do Windows para um sistema Unix ou derivado, utilize o &lt;a href=&quot;https://cygwin.com/install.html&quot;&gt;Cygwin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No item Expressões Regulares temos duas, vamos testar uma delas. Escreva um conteúdo como esse em um &lt;code&gt;arquivo.txt&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;kd&quot;&gt;
correto&lt;br /&gt;
certo&lt;br /&gt;
erto&lt;br /&gt;
incerto&lt;br /&gt;
berto&lt;br /&gt;
incorreto&lt;br /&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Agora, utilize o &lt;em&gt;egrep&lt;/em&gt; no arquivo da seguinte forma:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;kd&quot;&gt;
$ egrep '(in)?certo' arquivo.txt
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Seu resultado deve ser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;kd&quot;&gt;
certo&lt;br /&gt;
incerto
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;O padrão especificado foi &lt;code&gt;(in)?certo&lt;/code&gt;, que casou as palavras &lt;code&gt;certo&lt;/code&gt; e &lt;code&gt;incerto&lt;/code&gt; contidas no &lt;code&gt;arquivo.txt&lt;/code&gt; e retornou as linhas onde o “casamento” ocorreu.&lt;/p&gt;

&lt;p&gt;Outro exemplo, execute:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;kd&quot;&gt;
$ fgrep 'root' /etc/passwd
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Será casado e apresentado as linhas que contém o padrão especificado &lt;code&gt;root&lt;/code&gt;. Divirta-se dando &lt;em&gt;match&lt;/em&gt; no arquivo &lt;code&gt;/etc/passwd&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Neste post demos início a um tema que a primeira vista parece ser complexo, mas que ao decorrer dos estudos iremos simplificar o nosso entendimento. Foi visto um pouco da história das expressões regulares onde podemos observar a nobreza de sua origem, do que se trata e para o que serve. No item de exemplos podemos entender o que seria “casar” e “padrão” de regex. E se você prestou atenção, nos exemplos, embora semelhantes, utilizamos o &lt;em&gt;egrep&lt;/em&gt; e o &lt;em&gt;fgrep&lt;/em&gt;. Teremos um post tratando melhor sobre esses utilitários.&lt;/p&gt;

&lt;h3 id=&quot;próximo-episódio&quot;&gt;Próximo episódio&lt;/h3&gt;

&lt;p&gt;No próximo artigo sobre regex iremos começar a tratar sobre os metacaracteres, onde abordaremos a sua divisão em categorias.&lt;/p&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;p&gt;[1] - &lt;a href=&quot;https://blog.staffannoteberg.com/2013/01/30/regular-expressions-a-brief-history/&quot;&gt;https://blog.staffannoteberg.com/2013/01/30/regular-expressions-a-brief-history/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“You drive us wild” (Rock and Roll All Nite - Kiss)&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Edson Araújo</name></author><category term="regex" /><summary type="html">Introdução Neste post trataremos de um tema que tenho focado nos últimos meses. Caso você seja um usuário de derivados do Unix já deve ter se deparado com este tema pelo menos por command line. Sem dúvidas é bem legal de se trabalhar com expressões regulares, assim como é estudá-las. Dá pra se sentir um ser supremo diante dos seus amigos de TI que não conseguem entender essa sopa de (meta)?caracteres, que no final é algo bem simples de entender. A complexidade dessas expressões dependem da sua prática e do problema que você procura solucionar. Objetivo O objetivo deste post: simplificar as coisas. Mostrar de forma fácil e objetiva que expressões regulares são divertidas e fáceis de aprender. Na verdade, é como a maioria das coisas em computação, você somente aprende praticando. Caso você seja um iniciante no assunto, iremos aqui definir um norte para os seus estudos. Caso o contrário, seja bem vindo para complementar este texto com seus comentários pertinentes ao tema com o intuito de ajudar o estagiário. Expressões regulares Tudo (in)?certo para começarmos(?|!) Neste item vamos conhecer um pouco da história das expressões regulares para entendermos as suas origens e os seus aspectos. Isso parece coisa de humanas, mas é interessante conhecermos um pouco da ferramenta que utilizaremos, o que de fato ela é e em que momentos ela nos poderá ser útil. A História Uma imagem vale mais do que mil palavras Figura 1[1]. Warren McCulloch e Walter Pitts, em 1943, publicaram um trabalho, A logical calculus of the ideas immanent in nervous activity, no qual foi desenvolvido uma teoria em relação ao funcionamento dos neurônios humanos. Em 1956, o matemático Stephen Kleene desenvolveu algebricamente esse modelo e apresentou em uma publicação, Representation of events in nerve nets and finite automata, neste estudo símbolos foram utilizados para representar seus regular sets[1]. A partir daí nasceram as expressões regulares. Porém, apenas em 1968, Ken Thompson, o pioneiro do Unix, publicou o seu trabalho Regular expression search algorithm. Ele implementou seu algoritmo de busca no editor QED. Posteriormente, esse editor virou o editor padrão dos sistemas Unix, o Ed. Ele aceitava expressões regulares seguindo essa sintaxe:g/&amp;lt; regular expression &amp;gt;/p, onde, g de Global e p de Print (Global Regular Expression Print). Agora você sabe esse detalhe sobre o grep e a sua raiz com as expressões regulares. Em 1979, Alfred Aho o extendeu para o egrep[1]. O sed e awk foram desenvolvidos, mas o primeiro pacote de expressão regular surgiu na linguagem C, em 1986, e de forma gratuita. A partir de então o seu uso foi ampliado para diversos programas e linguagens. O que é? “MAZUQUEISSO? MAZUQUEISSO? MAZUQUEISSO?” Basicamente, são caracteres com funções especiais que formam uma expressão que é interpretada como regra para “casar” alguma coisa ou, por muitas vezes, partes de textos. Por “casar” devemos entender como um match (sim, isso também me lembra o Tinder), encaixar, bateu, confere e etc… Pode-se dizer, também, que expressão regular é uma forma de procurar um texto, uma sequência de caracteres, ou trecho em determinadas posições de acordo com um padrão especificado. E por “padrão” devemos entender como aquilo que se quer encontrar com a ajuda da regex. Um detalhe: será adotado a terminologia regex neste e nos próximos posts, caso queira utilizar o termo ER fique à vontade. Eu não utilizo esse termo porque ele me lembra de Entidade e Relacionamento lá de banco de dados. Para que serve? Para um monte de coisas Serve para várias tarefas que envolvam busca, extrações, manipulações e validações de padrões em textos. Particularmente, a pessoa que vos escreve utiliza bastante para converter formatos de arquivos e para extrair informações específicas em arquivos de output. Se você quiser uma lista, segue aí: Validação de campos de formulários Encontrar palavras reservadas Filtragem de informações em banco de dados Filtro de busca por campos (nome, idade, cpf, rg e etc.) Filtro de grep/egrep Substituição de caracteres Conversão de arquivos E etc. Exemplos O mais esperado Veremos a seguir alguns exemplos para testarmos no Terminal. Caso você seja teimoso e não queira migrar do Windows para um sistema Unix ou derivado, utilize o Cygwin. No item Expressões Regulares temos duas, vamos testar uma delas. Escreva um conteúdo como esse em um arquivo.txt: correto certo erto incerto berto incorreto Agora, utilize o egrep no arquivo da seguinte forma: $ egrep '(in)?certo' arquivo.txt Seu resultado deve ser: certo incerto O padrão especificado foi (in)?certo, que casou as palavras certo e incerto contidas no arquivo.txt e retornou as linhas onde o “casamento” ocorreu. Outro exemplo, execute: $ fgrep 'root' /etc/passwd Será casado e apresentado as linhas que contém o padrão especificado root. Divirta-se dando match no arquivo /etc/passwd. Conclusão Neste post demos início a um tema que a primeira vista parece ser complexo, mas que ao decorrer dos estudos iremos simplificar o nosso entendimento. Foi visto um pouco da história das expressões regulares onde podemos observar a nobreza de sua origem, do que se trata e para o que serve. No item de exemplos podemos entender o que seria “casar” e “padrão” de regex. E se você prestou atenção, nos exemplos, embora semelhantes, utilizamos o egrep e o fgrep. Teremos um post tratando melhor sobre esses utilitários. Próximo episódio No próximo artigo sobre regex iremos começar a tratar sobre os metacaracteres, onde abordaremos a sua divisão em categorias. Referências [1] - https://blog.staffannoteberg.com/2013/01/30/regular-expressions-a-brief-history/ “You drive us wild” (Rock and Roll All Nite - Kiss)</summary></entry></feed>
